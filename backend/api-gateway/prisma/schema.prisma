generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  auth0Id        String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  audioFiles     AudioFile[]
  midiFiles      MidiFile[]
  transcriptions Transcription[]
  libraries      Library[]
}

model Library {
  id        String      @id @default(uuid())
  name      String
  description String?
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  audioFiles AudioFile[] 
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model AudioFile {
  id            String         @id @default(uuid())
  name          String
  filePath      String
  userId        String
  fileType      String
  parentId      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  waveform      Json?
  parent        AudioFile?     @relation("ParentAudioFile", fields: [parentId], references: [id], onDelete: Cascade)
  stems         AudioFile[]    @relation("ParentAudioFile")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  midiFile      MidiFile?
  transcription Transcription?
  slices        Slice[]        
  libraryId     String?
  library       Library?       @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  isVocal       Boolean        @default(false)
  isSeparated   Boolean        @default(false)
}

model MidiFile {
  id          String    @id @default(uuid())
  name        String
  userId      String
  filePath    String
  fileType    String    @default("mid")
  audioFileId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  audioFile   AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transcription {
  id          String    @id @default(uuid())
  text        String
  userId      String
  audioFileId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  audioFile   AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Slice {
  id          String    @id @default(uuid())
  sliceId     String    @unique
  name        String
  start       Float
  end         Float?
  color       String
  audioFileId String    
  audioFile   AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

